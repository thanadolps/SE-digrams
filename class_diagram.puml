@startuml classDiagram

    ' use text-base attributes icon
    skinparam classAttributeIconSize 0
    ' hide class icon
    hide circle

    'skinparam linetype ortho
    'skinparam linetype polyline

    skinparam nodesep 100
    'skinparam ranksep 100

    'skinparam classBackgroundColor #d0b6eb
    'skinparam ClassFontSize 10

    'GENERALIZATION
    UserEntity <|-- CustomerEntity
    UserEntity <|-- AdminEntity
    CustomerEntity <|-- MusicianEntity
    CustomerEntity <|-- OrganizerEntity
    MessageEntity  <|-- AttachmentEntity
    MessageEntity  <|-- TextEntity
    MessageEntity  <|-- EventRequestEntity

    'ENTITY ENTITY 
    MusicianEntity "1..1" *-- "1..1" PortfolioEntity: is Part of <
    PortfolioEntity "1..1" -- "0..*\t" EventEntity: history <

    'Musician "1..1" -- "1..1" Location: live_at
    MusicianEntity "1..1" -- "0..*" EventEntity: work >
    EventEntity "0..*" -- "1..1" LocationEntity: at >
    OrganizerEntity "1..1" -- "0..*" EventEntity: host >

    EventEntity "1..1\t" o-- "1..1" ReviewEntity: is Part Of <
    EventEntity "1..1" o-- "1..*\t" PaymentEntity: is Part Of <



    ChatRoomEntity "1..1" *-- "0..*\t" MessageEntity: is Part of <
    EventEntity "1..*" - "1..1 " ChatRoomEntity: chat >
    OrganizerEntity "1..1\t" -- "1..*" ChatRoomEntity: chat >
    MusicianEntity "1..1" -- "1..*" ChatRoomEntity: chat >

    'BOUNDARY - CONTROL
    UserHandler "1..1"--"1..1" UserController: handle >
    AdminHandler "1..1"--"1..1" AdminController: handle >
    CustomerHandler "1..1" --"1..1" CustomerController: handle >
    MusicianHandler "1..1"--"1..1" MusicianController: handle >
    OrganizerHandler "1..1" --"1..1" OrganizerController: handle >
    MusicianHandler "1..1" --"1..1" MusicianController: handle >
    EventHandler "1..1"--"1..1" EventController: handle >
    PaymentHandler "1..1"--"1..1" PaymentController: handle >
    ReviewHandler "1..1"--"1..1" ReviewController: handle >
    EventRequestHandler "1..1"--"1..1" EventRequestController: handle >
    SearchHandler "1..1"--"1..1" SearchController: handle >
    LocationHandler "1..1"--"1..1" LocationController: handle >
    ChatRoomHandler "1..1"--"1..1" ChatRoomController: handle >
    CalendarHandler "1..1"--"1..1" CalendarController: handle >
    PortfolioHandler "1..1"--"1..1" PortfolioController: handle >

    'CONTROLL-ENTITY
    UserController "1..1"--"0..*" UserEntity: control >
    AdminController "1..1"--"0..*" AdminEntity: control >
    CustomerController "1..1"--"0..*" CustomerEntity: control >
    MusicianController "1..1"--"0..*" MusicianEntity: control >
    OrganizerController "1..1"--"0..*" OrganizerEntity: control >
    MusicianController "1..1"--"0..*" MusicianEntity: control >
    EventController "1..1"--"0..*" EventEntity: control >
    PaymentController "1..1"--"0..*" PaymentEntity: control >
    ReviewController "1..1"--"0..*" ReviewEntity: control >
    EventRequestController "1..1"--"0..*" EventRequestEntity: control >
    SearchController "1..1"--"0..*" SearchEntity: control >
    LocationController "1..1"--"0..*" LocationEntity: control >
    ChatRoomController "1..1"--"0..*" ChatRoomEntity: control >
    CalendarController "1..1"--"0..*" CalendarEntity: control >
    PortfolioController "1..1"--"0..*" PortfolioEntity: control >

    'CONTROL-CONTROL
    CalendarController "1..1"--"1..1" CustomerController: call <
    SearchController "1..1"--"1..1" OrganizerController: call <
    class UserHandler <<Boundary>> {
        +login()
        +verify(password)
        +update password(new_password)
    }

    class UserController <<Control>> {
        +change password(new_password)
    }

    class UserEntity <<Entity>> {
        -user_id
        -salt
        -password_hash
    }

    class AdminEntity <<Entity>> {
        -staff_id
    }

    class AdminController <<Control>> {
        +manage review()
    }

    class AdminHandler <<Boundary>> {
        +update review()
    }

    class CustomerEntity <<Entity>> {
        -customer_id
        -first_name
        -last_name
        -phone_number
        -email
        -calendar_color
        -calendar_style
        -calendar_font_size
    }

    class CustomerController <<Control>> {
        +change calendar preference()
        +change account detail()
        +send message(chatroom_id)
    }

    class CustomerHandler <<Boundary>> {
        +update calendar preference()
        +update account detail()
    }

    class CalendarController <<Control>> {
        +manage related events()
    }

    class CalendarHandler <<Boundary>> {
        +fetch related events(customer_id)
    }

    class MusicianEntity <<Entity>> {
        -status
        -specialty[0..*]
        -profile_picture
        -introduction
        -link
        -latitute
        -longitude
        -sub_district
        -district
        -province
        -zip_code
        -picture_uri[0..*]
    }

    class MusicianController <<Control>> {
        +edit portfolio()
    }  

    class MusicianHandler <<Boundary>> {
        +update portfolio()
        +accept event request()
        +decline event request()
    }

    'User "1..1" -- "1..1\t" Credential: authenticate <

    class PortfolioEntity <<Entity>> {
        -link
        -text
        -profile_picture
        -picture_uri
    }

    class PortfolioController <<Controller>> {
        +manage portfolio()
    }

    class PortfolioHandler <<Boundary>> {
        +update portfolio()
    }

    class OrganizerEntity <<Entity>> {
        -company
    }

    class OrganizerController <<Control>> {
        +search musician (event_details[0..*])
        +initiate chatroom(musicianId)
        +initiate event request(event_details[0..*])
        +confirm event completion(event_id)
        +create review(event_id)
    }

    class OrganizerHandler <<Boundary>> {
    }

    class EventEntity <<Entity>> {
        -event_id
        -status
        -start_time
        -end_time
        -description
        -wage
    }    

    class EventController <<Control>> {
    
    }

    class EventHandler <<Boundary>> {
        +update calendar()
        +create review()
        +create payment()
        +add to portfolio()
    }

    class SearchController <<Control>> {
        +calculate matching musicians(event_details[0..*])
    }

    class SearchHandler <<Boundary>> {
        +fill in event details()
        +search matching musicians(event_details[0..*])
    }

    class LocationEntity <<Entity>> {
        -location_id
        -longitude
        -latitude
        -sub_district
        -district
        -province
        -zip_code
    }

    class LocationController <<Control>> {
        +create location()
        +calculate distance()
    }

    class LocationHandler <<Boundary>> {
        +add location()
        +update location()
    }

    class ReviewEntity <<Entity>> {
        -review_id
        -rating
        -comment
        -created_at
    }

    class ReviewController <<Control>> {
        +create review()
        +set available()
        +set unavailable()
    }

    class ReviewHandler <<Boundary>> {
        +add review()
        +update review(reviewId)
    }

    class PaymentEntity <<Entity>>{
        -payment_id
        -status
        -transaction_id
        -method
        -timestamp
        -currency_type
        -amount
        -description
        
    } 

    class PaymentController <<Control>> {
        +notify payment()
        +check payment()
    }

    class PaymentHandler <<Boundary>> {
        +verify transaction()
        +update payment()
    }

    class MessageEntity <<Entity>> {
        -message_no
        -sent_at
        -sender
    }

    class AttachmentEntity <<Entity>> {
        -uri
    }

    class TextEntity <<Entity>> {
        -text
    }

    class EventRequestEntity <<Entity>> {
        -start_time
        -end_time
        -description
    }

    class EventRequestHandler <<Boundary>> {
        +update event request()
    }

    class ChatRoomEntity <<Entity>> {
        -chatroom_id
    } 
    
    class ChatRoomController <<Control>> {

    }

    class ChatRoomHandler <<Boundary>> {
        +create chatroom(organizerId, musicianId)
        +create message(text,senderId)
    }

@enduml